#!/Users/jamesveitch/Virtualenvs/ansible/bin/python
# /usr/bin/env python
# -*- coding: utf-8 -*-

# (c) 2016, Hugh Ma <Hugh.Ma@flextronics.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: google_auth
short_description: Create and validate google-auth one time passwords (OTP)
description:
 - Helper library to interface with OTP (One Time Password) multi-factor
 authentication requirements on inventory hosts.
 - Predominantly aimed at Google-Authenticator usage for SSH to set a valid
 fact for `ansible_ssh_pass` usage. Leverages the `pyotp` library which can be
 found at https://github.com/pyotp/pyotp.

author: "James Veitch <james@jamesveitch.com>"
'''

import pyotp
import sys
import datetime
import json
import tempfile
import json

# import module snippets
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.urls import fetch_url, ConnectionError

METHOD_TOTP = 'totp'
METHOD_HOTP = 'hotp'


def verify_code(secret, code, method):
    """ Takes a pre-existing code and outputs a response as to if it is still
    valid Time-Based One-Time Password (TOTP).

    Returns: bool """
    totp = pyotp.TOTP(secret)
    return totp.verify(code)


def generate_code(secret, method):
    """ Takes a string secret generated by google-authenticator and outputs a
    Time-Based One-Time Password (TOTP).

    Returns: 2FA string code. """
    totp = pyotp.TOTP(secret)
    return totp.now()


if __name__ == '__main__':
    import argparse
    response = None

    parser = argparse.ArgumentParser(description='Commandline settings')
    parser.add_argument('-c', '--code', help='existing 2FA code')
    parser.add_argument('-s', '--secret', help='secret key')
    parser.add_argument('-m', '--method',
                        help='authentication method "hotp" or "totp"',
                        default=METHOD_TOTP)
    parser.add_argument('-v', '--verify', help='verify validity of code',
                        action='store_true')
    args = parser.parse_args()

    if args.verify:
        response = verify_code(args.secret, args.code, args.method)
    else:
        response = generate_code(args.secret, args.method)

    print(response)
